from aiogram import F, Router, types
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder

from keyboards.inline import Paginator
from keyboards.reply import get_main_menu
from database import get_user_watchlist, remove_movie_from_watchlist
from states.user_states import MovieSearch

router = Router()


@router.message(CommandStart())
async def cmd_start(msg: types.Message):
    await msg.answer(text='–ü—Ä–∏–≤–µ—Ç! FlickPage ‚Äì —ç—Ç–æ –±–æ—Ç –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ —Ñ–∏–ª—å–º–æ–≤, —Å–µ—Ä–∏–∞–ª–æ–≤ –∏ –º—É–ª—å—Ç—Ñ–∏–ª—å–º–æ–≤, '
                          '–∞ —Ç–∞–∫–∂–µ —Å–æ–∑–¥–∞–Ω–∏—è —Å–ø–∏—Å–∫–æ–≤ —Å –Ω–∏–º–∏. \n\n–î–ª—è –ø–æ–∏—Å–∫–∞ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞.',
                     reply_markup=get_main_menu())


@router.message(Command("help"))
async def cmd_help(msg: types.Message):
    await msg.answer(text='–î–ª—è –ø–æ–∏—Å–∫–∞ —Ñ–∏–ª—å–º–∞, —Å–µ—Ä–∏–∞–ª–∞ –∏–ª–∏ –º—É–ª—å—Ç—Ñ–∏–ª—å–º–∞ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏–µ.\n/help ‚Äì '
                          '–ø–æ–º–æ—â—å\n/list ‚Äì –æ—Ç–∫—Ä—ã—Ç—å —Å–ø–∏—Å–æ–∫\n/fast_list ‚Äì –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—É—é –≤–µ—Ä—Å–∏—é —Å–ø–∏—Å–∫–∞ –±–µ–∑ '
                          '–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è\n\n–ü–æ –∏–Ω—ã–º –≤–æ–ø—Ä–æ—Å–∞–º: @Spaghettireb31')


@router.message(F.text == "‚ùì –ü–æ–º–æ—â—å")
async def help_button_handler(msg: types.Message):
    await cmd_help(msg)


@router.message(Command("list"))
async def cmd_lists(msg: types.Message, state: FSMContext):
    movies = await get_user_watchlist(msg.from_user.id)
    if not movies:
        await msg.answer(text="–í—ã –ø–æ–∫–∞ –Ω–∏—á–µ–≥–æ –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ –≤ —Å–≤–æ–π —Å–ø–∏—Å–æ–∫(")
        return
    await state.set_state(MovieSearch.listing)
    await msg.answer(text='–í–æ—Ç —á—Ç–æ –≤—ã —Ö–æ—Ç–µ–ª–∏ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å: ')
    await state.update_data(results=movies, total=len(movies))
    movie = eval(movies[0][1])
    caption = f"<b>{movie['nameRu'] if 'nameRu' in movie.keys() else movie['nameEn']}, {movie['year']}</b> (1/{len(movies)})"
    keyboard = get_pagination_keyboard(
        current_page=0,
        total_pages=len(movies),
    )

    await msg.answer_photo(
        photo=movie['posterUrlPreview'],
        caption=caption,
        parse_mode="HTML",
        reply_markup=keyboard
    )


def get_pagination_keyboard(current_page: int, total_pages: int):
    builder = InlineKeyboardBuilder()

    if current_page > 0:
        builder.button(
            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
            callback_data=Paginator(action="prev", current_page=current_page).pack()
        )

    builder.button(text="‚ùå –£–¥–∞–ª–∏—Ç—å",
                   callback_data=Paginator(action="del", current_page=current_page).pack())

    if current_page < total_pages - 1:
        builder.button(
            text="–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è",
            callback_data=Paginator(action="next", current_page=current_page).pack()
        )

    builder.adjust(3)
    return builder.as_markup()


@router.callback_query(MovieSearch.listing, Paginator.filter(F.action == "del"))
async def delete_handler(callback: types.CallbackQuery, callback_data: Paginator, state: FSMContext):
    data = await state.get_data()
    movies = data.get('results', [])
    total_pages = data.get('total', 0)
    current_page = callback_data.current_page

    # –¥–æ—Å—Ç–∞—ë–º –¥–∞–Ω–Ω—ã–µ –æ —Ñ–∏–ª—å–º–µ
    movie_data = eval(movies[current_page][1])
    movie_id = movie_data['filmId']
    user_id = callback.from_user.id

    if not movie_id or not movie_data:
        await callback.message.answer("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        await state.clear()
        return

    # —É–¥–∞–ª—è–µ–º —Ñ–∏–ª—å–º –∏–∑ –±–∞–∑—ã
    await remove_movie_from_watchlist(user_id, movie_id)

    # —É–¥–∞–ª—è–µ–º —Ñ–∏–ª—å–º –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
    movies.pop(current_page)
    total_pages -= 1

    # –µ—Å–ª–∏ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –º—ã –æ–∫–∞–∑–∞–ª–∏—Å—å "–∑–∞ –ø—Ä–µ–¥–µ–ª–∞–º–∏", —Å–º–µ—â–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
    if current_page >= total_pages and total_pages > 0:
        current_page = total_pages - 1

    # –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.update_data(results=movies, total=total_pages, current_page=current_page)

    await callback.message.answer(
        text=f"–§–∏–ª—å–º ¬´<b>{movie_data.get('nameRu') or movie_data.get('nameEn')}</b>¬ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω!",
        parse_mode="HTML"
    )

    # –µ—Å–ª–∏ —Ñ–∏–ª—å–º—ã –µ—â—ë –æ—Å—Ç–∞–ª–∏—Å—å, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π
    if total_pages > 0:
        await pagination_handler(
            callback=callback,
            callback_data=Paginator(action="show", current_page=current_page),
            state=state
        )
    else:
        # –µ—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç
        await callback.message.edit_caption("–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç üé¨", reply_markup=None)

    await callback.answer()


@router.callback_query(MovieSearch.listing, Paginator.filter())
async def pagination_handler(callback: types.CallbackQuery, callback_data: Paginator, state: FSMContext):
    data = await state.get_data()
    movies = data.get('results', [])
    total_pages = data.get('total', 0)
    current_page = data.get('current_page', 0)

    # –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¥–µ–π—Å—Ç–≤–∏—è
    if callback_data.action == "next":
        current_page = min(current_page + 1, total_pages - 1)
    elif callback_data.action == "prev":
        current_page = max(current_page - 1, 0)
    elif callback_data.action == "show":
        # "show" –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è ‚Äî —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —É–∂–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∞
        pass
    else:
        # –µ—Å–ª–∏ –ø—Ä–∏—à—ë–ª –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π action, –ø—Ä–æ—Å—Ç–æ –≤—ã—Ö–æ–¥–∏–º
        await callback.answer()
        return

    # –µ—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç
    if total_pages == 0 or not movies:
        await callback.message.edit_caption("–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç üé¨", reply_markup=None)
        await state.update_data(current_page=0)
        await callback.answer()
        return

    # –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.update_data(current_page=current_page)

    # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ñ–∏–ª—å–º
    movie = eval(movies[current_page][1])
    caption = (
        f"<b>{movie.get('nameRu') or movie.get('nameEn')}, {movie['year']}</b> "
        f"({current_page + 1}/{total_pages})"
    )
    keyboard = get_pagination_keyboard(
        current_page=current_page,
        total_pages=total_pages
    )

    await callback.message.edit_media(
        media=types.InputMediaPhoto(
            media=movie['posterUrlPreview'],
            caption=caption,
            parse_mode="HTML"
        ),
        reply_markup=keyboard
    )

    await callback.answer()


@router.message(F.text == "üìö –ú–æ–π —Å–ø–∏—Å–æ–∫")
async def lists_button_handler(msg: types.Message, state: FSMContext):
    await cmd_lists(msg, state)


@router.message(Command("fast_list"))
async def cmd_fast_list(msg: types.Message):
    movies = await get_user_watchlist(msg.from_user.id)
    if not movies:
        await msg.answer(text="–í—ã –ø–æ–∫–∞ –Ω–∏—á–µ–≥–æ –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ –≤ —Å–≤–æ–π —Å–ø–∏—Å–æ–∫(")
        return
    ans = ""
    for i in range(len(movies)):
        ans += f"{i+1}. <b>{eval(movies[i][1])['nameRu'] if 'nameRu' in eval(movies[i][1]).keys() else eval(movies[i][1])['nameEn']}</b>, {eval(movies[i][1])['year']}\n"
    await msg.answer(text=ans, parse_mode="HTML")


@router.message(F.text == "‚ö°Ô∏è –ë—ã—Å—Ç—Ä—ã–π —Å–ø–∏—Å–æ–∫")
async def lists_button_handler(msg: types.Message):
    await cmd_fast_list(msg)